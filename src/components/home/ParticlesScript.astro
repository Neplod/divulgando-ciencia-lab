<script>
    document.addEventListener('DOMContentLoaded', () => {
        const canvas = document.getElementById('particlesHero');
        if (!canvas) return;

        const ctx = canvas.getContext('2d');
        if (!ctx) return;

        let animationFrameId;
        let particles = [];

        const resizeCanvas = () => {
            canvas.width = window.innerWidth;
            canvas.height = parseFloat(getComputedStyle(canvas.parentElement.parentElement).height.slice(0,-2));
            initParticles();
        };

        const initParticles = () => {
            particles = [];
            const particleCount = Math.min(Math.floor(window.innerWidth / 10), 100);

            for (let i = 0; i < particleCount; i++) {
                particles.push({
                    x: Math.random() * canvas.width,
                    y: Math.random() * canvas.height,
                    size: Math.random() * 3 + 1,
                    speedX: (Math.random() - 0.5) * 0.5,
                    speedY: (Math.random() - 0.5) * 0.5,
                    opacity: Math.random() * 0.5 + 0.1,
                });
            }
        };

        const drawParticles = () => {
            ctx.clearRect(0, 0, canvas.width, canvas.height);
            let dark = document.documentElement.classList.contains('dark');

            particles.forEach((particle, i) => {
                // Update position
                particle.x += particle.speedX;
                particle.y += particle.speedY;

                // Wrap around edges
                if (particle.x > canvas.width) particle.x = 0;
                if (particle.x < 0) particle.x = canvas.width;
                if (particle.y > canvas.height) particle.y = 0;
                if (particle.y < 0) particle.y = canvas.height;

                // Draw particle
                ctx.beginPath();
                ctx.arc(particle.x, particle.y, particle.size, 0, Math.PI * 2);
                ctx.fillStyle = `rgba(${dark ? '255, 255, 255' : '0, 0, 0'}, ${particle.opacity})`;
                ctx.fill();

                // Draw connections
                connectParticles(particle, i, dark);
            });
        };

        const connectParticles = (particle, index, dark) => {
            for (let j = index + 1; j < particles.length; j++) {
                const particle2 = particles[j];
                const distance = Math.sqrt(
                    Math.pow(particle.x - particle2.x, 2) + Math.pow(particle.y - particle2.y, 2)
                );

                if (distance < 100) {
                    ctx.beginPath();
                    ctx.strokeStyle = `rgba(${dark ? '255, 255, 255' : '0, 0, 0'}, ${0.2 * (1 - distance / 100)})`;
                    ctx.lineWidth = 0.5;
                    ctx.moveTo(particle.x, particle.y);
                    ctx.lineTo(particle2.x, particle2.y);
                    ctx.stroke();
                }
            }
        };

        const animate = () => {
            drawParticles();
            animationFrameId = requestAnimationFrame(animate);
        };

        window.addEventListener('resize', resizeCanvas);
        resizeCanvas();
        animate();

        // Cleanup function
        return () => {
            window.removeEventListener('resize', resizeCanvas);
            cancelAnimationFrame(animationFrameId);
        };
    });
</script>
<script>
    document.addEventListener('DOMContentLoaded', () => {
        const canvas = document.getElementById('particlesArticles');
        if (!canvas) return;

        const ctx = canvas.getContext('2d');
        if (!ctx) return;

        let animationFrameId;
        let particles = [];

        const resizeCanvas = () => {
            canvas.width = parseFloat(getComputedStyle(canvas.parentElement.parentElement).width.slice(0,-2));;
            canvas.height = parseFloat(getComputedStyle(canvas.parentElement.parentElement).height.slice(0,-2));
            initParticles();
        };

        const initParticles = () => {
            particles = [];
            const particleCount = Math.min(Math.floor(canvas.height / 10), 100);

            for (let i = 0; i < particleCount; i++) {
                particles.push({
                    x: Math.random() * canvas.width,
                    y: Math.random() * canvas.height,
                    size: Math.random() * 3 + 1,
                    speedX: (Math.random() - 0.5) * 0.5,
                    speedY: (Math.random() - 0.5) * 0.5,
                    opacity: Math.random() * 0.5 + 0.1,
                });
            }
        };

        const drawParticles = () => {
            ctx.clearRect(0, 0, canvas.width, canvas.height);
            let dark = document.documentElement.classList.contains('dark');

            particles.forEach((particle, i) => {
                // Update position
                particle.x += particle.speedX;
                particle.y += particle.speedY;

                // Wrap around edges
                if (particle.x > canvas.width) particle.x = 0;
                if (particle.x < 0) particle.x = canvas.width;
                if (particle.y > canvas.height) particle.y = 0;
                if (particle.y < 0) particle.y = canvas.height;

                // Draw particle
                ctx.beginPath();
                ctx.arc(particle.x, particle.y, particle.size, 0, Math.PI * 2);
                ctx.fillStyle = `rgba(${dark ? '255, 255, 255' : '0, 0, 0'}, ${particle.opacity})`;
                ctx.fill();

                // Draw connections
                connectParticles(particle, i, dark);
            });
        };

        const connectParticles = (particle, index, dark) => {
            for (let j = index + 1; j < particles.length; j++) {
                const particle2 = particles[j];
                const distance = Math.sqrt(
                    Math.pow(particle.x - particle2.x, 2) + Math.pow(particle.y - particle2.y, 2)
                );

                if (distance < 100) {
                    ctx.beginPath();
                    ctx.strokeStyle = `rgba(${dark ? '255, 255, 255' : '0, 0, 0'}, ${0.2 * (1 - distance / 100)})`;
                    ctx.lineWidth = 0.5;
                    ctx.moveTo(particle.x, particle.y);
                    ctx.lineTo(particle2.x, particle2.y);
                    ctx.stroke();
                }
            }
        };

        const animate = () => {
            drawParticles();
            animationFrameId = requestAnimationFrame(animate);
        };

        window.addEventListener('resize', resizeCanvas);
        resizeCanvas();
        animate();

        // Cleanup function
        return () => {
            window.removeEventListener('resize', resizeCanvas);
            cancelAnimationFrame(animationFrameId);
        };
    });
</script>
<script>
    document.addEventListener('DOMContentLoaded', () => {
        const canvas = document.getElementById('particlesCommunity');
        if (!canvas) return;

        const ctx = canvas.getContext('2d');
        if (!ctx) return;

        let animationFrameId;
        let particles = [];

        const resizeCanvas = () => {
            canvas.width = window.innerWidth;
            canvas.height = parseFloat(getComputedStyle(canvas.parentElement.parentElement).height.slice(0,-2));
            initParticles();
        };

        const initParticles = () => {
            particles = [];
            const particleCount = Math.min(Math.floor(window.innerWidth / 10), 100);

            for (let i = 0; i < particleCount; i++) {
                particles.push({
                    x: Math.random() * canvas.width,
                    y: Math.random() * canvas.height,
                    size: Math.random() * 3 + 1,
                    speedX: (Math.random() - 0.5) * 0.5,
                    speedY: (Math.random() - 0.5) * 0.5,
                    opacity: Math.random() * 0.5 + 0.1,
                });
            }
        };

        const drawParticles = () => {
            ctx.clearRect(0, 0, canvas.width, canvas.height);
            let dark = document.documentElement.classList.contains('dark');

            particles.forEach((particle, i) => {
                // Update position
                particle.x += particle.speedX;
                particle.y += particle.speedY;

                // Wrap around edges
                if (particle.x > canvas.width) particle.x = 0;
                if (particle.x < 0) particle.x = canvas.width;
                if (particle.y > canvas.height) particle.y = 0;
                if (particle.y < 0) particle.y = canvas.height;

                // Draw particle
                ctx.beginPath();
                ctx.arc(particle.x, particle.y, particle.size, 0, Math.PI * 2);
                ctx.fillStyle = `rgba(${dark ? '255, 255, 255' : '0, 0, 0'}, ${particle.opacity})`;
                ctx.fill();

                // Draw connections
                connectParticles(particle, i, dark);
            });
        };

        const connectParticles = (particle, index, dark) => {
            for (let j = index + 1; j < particles.length; j++) {
                const particle2 = particles[j];
                const distance = Math.sqrt(
                    Math.pow(particle.x - particle2.x, 2) + Math.pow(particle.y - particle2.y, 2)
                );

                if (distance < 100) {
                    ctx.beginPath();
                    ctx.strokeStyle = `rgba(${dark ? '255, 255, 255' : '0, 0, 0'}, ${0.2 * (1 - distance / 100)})`;
                    ctx.lineWidth = 0.5;
                    ctx.moveTo(particle.x, particle.y);
                    ctx.lineTo(particle2.x, particle2.y);
                    ctx.stroke();
                }
            }
        };

        const animate = () => {
            drawParticles();
            animationFrameId = requestAnimationFrame(animate);
        };

        window.addEventListener('resize', resizeCanvas);
        resizeCanvas();
        animate();

        // Cleanup function
        return () => {
            window.removeEventListener('resize', resizeCanvas);
            cancelAnimationFrame(animationFrameId);
        };
    });
</script>